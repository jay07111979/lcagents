#!/usr/bin/env node

/**
 * Test script to verify the new installation flow
 */

const fs = require('fs-extra');
const path = require('path');

async function verifyNewFlow() {
    console.log('üîÑ Verifying new installation flow implementation...\n');
    
    try {
        const initFilePath = path.join(__dirname, 'src/cli/commands/init.ts');
        const content = await fs.readFile(initFilePath, 'utf-8');
        
        // Check for the new flow steps
        const hasStep1 = content.includes('// Step 1: Get directory') &&
                        content.includes('const installPath = await selectInstallationDirectory();');
        
        const hasStep2 = content.includes('// Step 2: Validate directory source') &&
                        content.includes('await validateInstallationDirectory(installPath);');
        
        const hasStep3 = content.includes('// Step 3: Get the pod name') &&
                        content.includes('const podInfo = await getPodInformation();');
        
        const hasStep4 = content.includes('// Step 4: Analyze tech stack') &&
                        content.includes('await analyzeTechStackWithContext(installPath, podInfo);');
        
        // Check for function definitions
        const hasFunctions = content.includes('async function selectInstallationDirectory(): Promise<string>') &&
                           content.includes('async function validateInstallationDirectory(installPath: string): Promise<void>') &&
                           content.includes('async function getPodInformation()') &&
                           content.includes('async function analyzeTechStackWithContext(');
        
        // Check tech stacker exports
        const techStackerPath = path.join(__dirname, 'src/utils/techStacker.ts');
        const techStackerContent = await fs.readFile(techStackerPath, 'utf-8');
        const hasSelectPodExport = techStackerContent.includes('export async function selectPod()');
        const hasUpdatedAnalyze = techStackerContent.includes('providedPodInfo?: { name: string; id: string; owner: string }');
        
        console.log('üìä New Flow Implementation Status:');
        console.log(`   ${hasStep1 ? '‚úÖ' : '‚ùå'} Step 1: Get directory`);
        console.log(`   ${hasStep2 ? '‚úÖ' : '‚ùå'} Step 2: Validate directory source`);
        console.log(`   ${hasStep3 ? '‚úÖ' : '‚ùå'} Step 3: Get pod name`);
        console.log(`   ${hasStep4 ? '‚úÖ' : '‚ùå'} Step 4: Analyze tech stack`);
        console.log(`   ${hasFunctions ? '‚úÖ' : '‚ùå'} New function definitions`);
        console.log(`   ${hasSelectPodExport ? '‚úÖ' : '‚ùå'} selectPod export`);
        console.log(`   ${hasUpdatedAnalyze ? '‚úÖ' : '‚ùå'} Updated analyzeTechStack`);
        console.log('   ‚úÖ Step 5: Install LCAgents (existing)');
        console.log('   ‚úÖ Step 6: Update files (existing)');
        console.log('   ‚úÖ Step 7: Exit installation (existing)');
        console.log('');
        
        if (hasStep1 && hasStep2 && hasStep3 && hasStep4 && hasFunctions && hasSelectPodExport && hasUpdatedAnalyze) {
            console.log('üéâ New installation flow has been successfully implemented!');
            console.log('');
            console.log('üìù Flow Summary:');
            console.log('   1. üìÅ Get directory - User selects installation directory');
            console.log('   2. ‚úÖ Validate directory - Check for valid project files');
            console.log('   3. üè¢ Get pod name - User selects organizational pod');
            console.log('   4. üîç Analyze tech stack - Scan project technology');
            console.log('   5. üöÄ Install LCAgents - Core system installation');
            console.log('   6. üìù Update files - Save pod, repo, techstack values');
            console.log('   7. üéØ Exit installation - Clean completion');
            console.log('');
            console.log('‚ú® Pod selection now happens after directory validation and before tech stack analysis!');
        } else {
            console.log('‚ùå New flow implementation incomplete');
        }
        
    } catch (error) {
        console.error('‚ùå Verification failed:', error.message);
    }
}

verifyNewFlow();
